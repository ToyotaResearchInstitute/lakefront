import React from 'react';
import { render } from '@testing-library/react';
import CircularProgress from '../CircularProgress';
import { pie as d3pie } from 'd3-shape';
import { PROGRESS_COLOR_SCHEME } from 'src/stories/Progress/progressColors';
const items = [
    { label: 'finished', value: 5 },
    { label: 'failed', value: 30 },
    { label: 'running', value: 10 },
    { label: 'pending', value: 5 }
];
describe('<CircularProgress />', () => {
    describe('general rendering', () => {
        it('renders a hollow middle circle', () => {
            const { container } = render(
                <CircularProgress theme={PROGRESS_COLOR_SCHEME} text="12%" data={items} width={100} />
            );
            expect(container.getElementsByTagName('circle')[0]).toHaveAttribute('r', '45');
            expect(container.getElementsByTagName('circle')[0]).toHaveAttribute('cx', '50');
            expect(container.getElementsByTagName('circle')[0]).toHaveAttribute('cy', '50');
        });
        it('renders a middle text', () => {
            const { container } = render(
                <CircularProgress theme={PROGRESS_COLOR_SCHEME} text="12%" data={items} width={100} />
            );
            expect(container.getElementsByTagName('span')[0]).toHaveTextContent('12%');
        });
        it('test out the arcs generated by pie function', () => {
            const arcs = d3pie()(items.map(d => d.value));
            const [finished, failed, running, pending] = arcs;

            expect(arcs.length).toBe(4);

            // finished should be the starting arc
            expect(failed.startAngle).toBe(0);

            // finished and pending should have the same arc length
            expect(finished.startAngle - finished.endAngle).toBe(pending.startAngle - pending.endAngle);

            // failed to have a greater arc length than running
            expect(failed.endAngle - failed.startAngle).toBeGreaterThan(running.endAngle - running.startAngle);
        });
        it('renders a transparent color for a non existing label', () => {
            const { container } = render(
                <CircularProgress theme={PROGRESS_COLOR_SCHEME} text="12%" data={[{ label: 'testlabel', value: 5 }]} width={100} />
            );
            expect(container.getElementsByTagName('path')[0]).toHaveAttribute('fill', 'transparent');
        });
        it('test the width of the circular progress', () => {
            const { container } = render(
                <CircularProgress theme={PROGRESS_COLOR_SCHEME} text="12%" data={items} width={500} />
            );
            expect(container.getElementsByTagName('div')[0]).toHaveAttribute('width', '500');
        });
    });
});
